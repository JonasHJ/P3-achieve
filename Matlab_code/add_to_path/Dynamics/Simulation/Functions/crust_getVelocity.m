function V = crust_getVelocity( input )
% This function calculates the velocity term V(theta, d_theta) in the EoM where the input is
% theta [rad] and d_theta [rad/sec] of all joints.

% Defines the six inputs for the velocity term, where as the first three is
% the joint angles theta[rad] and the last three velocities
% d_theta[rad/sec].
theta = input(1:3);
d_theta = input(4:6);

% The global variables below is imported from Workspace which recieves the
% variables from ImportVars.m
global l2 lc2 m2 lc3 m3
global I2 I3

% The elements of the V term in the EoM is defined below, where each row
% consists of all terms multiplied with d_theta
% e.g. V(1,1) consists of all terms multiplied with d_theta1, 2 or 3 in the tau_1 term.
V(1,1) = (I2(2,1)*d_theta(2)^2*cos(theta(1)))/2 + (I3(2,1)*d_theta(2)^2*cos(theta(1)))/2 + (I3(2,1)*d_theta(3)^2*cos(theta(1)))/2 + (I2(2,2)*d_theta(2)^2*sin(theta(1)))/2 + (I3(2,2)*d_theta(2)^2*sin(theta(1)))/2 + (I3(2,2)*d_theta(3)^2*sin(theta(1)))/2 + I3(2,1)*d_theta(2)*d_theta(3)*cos(theta(1)) + I3(2,2)*d_theta(2)*d_theta(3)*sin(theta(1)) + (I2(3,1)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2)))/2 - (I2(1,1)*d_theta(1)*d_theta(2)*cos(theta(1))*sin(theta(2)))/2 + (I2(3,2)*d_theta(1)*d_theta(2)*cos(theta(2))*sin(theta(1)))/2 - (I2(1,2)*d_theta(1)*d_theta(2)*sin(theta(1))*sin(theta(2)))/2 + (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2))*cos(theta(3)))/2 + (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(2))*cos(theta(3)))/2 - (I3(1,1)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2))*sin(theta(3)))/2 - (I3(1,1)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(3))*sin(theta(2)))/2 - (I3(1,1)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(2))*sin(theta(3)))/2 - (I3(1,1)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(3))*sin(theta(2)))/2 + (I3(3,2)*d_theta(1)*d_theta(2)*cos(theta(2))*cos(theta(3))*sin(theta(1)))/2 + (I3(3,2)*d_theta(1)*d_theta(3)*cos(theta(2))*cos(theta(3))*sin(theta(1)))/2 - (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(2))*sin(theta(1))*sin(theta(3)))/2 - (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(3))*sin(theta(1))*sin(theta(2)))/2 - (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(2))*sin(theta(1))*sin(theta(3)))/2 - (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(3))*sin(theta(1))*sin(theta(2)))/2 - (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(1))*sin(theta(2))*sin(theta(3)))/2 - (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(1))*sin(theta(2))*sin(theta(3)))/2 - (I3(3,2)*d_theta(1)*d_theta(2)*sin(theta(1))*sin(theta(2))*sin(theta(3)))/2 - (I3(3,2)*d_theta(1)*d_theta(3)*sin(theta(1))*sin(theta(2))*sin(theta(3)))/2;
V(2,1) = (I2(1,3)*d_theta(1)^2*cos(theta(2)))/2 + (I2(3,3)*d_theta(1)^2*sin(theta(2)))/2 + (I3(1,3)*d_theta(1)^2*cos(theta(2))*cos(theta(3)))/2 + (I3(3,3)*d_theta(1)^2*cos(theta(2))*sin(theta(3)))/2 + (I3(3,3)*d_theta(1)^2*cos(theta(3))*sin(theta(2)))/2 - (I3(1,3)*d_theta(1)^2*sin(theta(2))*sin(theta(3)))/2 - (l2^2*m3*d_theta(1)^2*sin(2*theta(2)))/2 - (lc2^2*m2*d_theta(1)^2*sin(2*theta(2)))/2 + (I2(1,2)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2)))/2 - (I2(1,1)*d_theta(1)*d_theta(2)*cos(theta(2))*sin(theta(1)))/2 + (I2(3,2)*d_theta(1)*d_theta(2)*cos(theta(1))*sin(theta(2)))/2 - (I2(3,1)*d_theta(1)*d_theta(2)*sin(theta(1))*sin(theta(2)))/2 - (lc3^2*m3*d_theta(1)^2*cos(2*theta(2))*sin(2*theta(3)))/2 - (lc3^2*m3*d_theta(1)^2*cos(2*theta(3))*sin(2*theta(2)))/2 + (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2))*cos(theta(3)))/2 + (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(2))*cos(theta(3)))/2 - (I3(1,1)*d_theta(1)*d_theta(2)*cos(theta(2))*cos(theta(3))*sin(theta(1)))/2 - (I3(1,1)*d_theta(1)*d_theta(3)*cos(theta(2))*cos(theta(3))*sin(theta(1)))/2 + (I3(3,2)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(2))*sin(theta(3)))/2 + (I3(3,2)*d_theta(1)*d_theta(2)*cos(theta(1))*cos(theta(3))*sin(theta(2)))/2 + (I3(3,2)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(2))*sin(theta(3)))/2 + (I3(3,2)*d_theta(1)*d_theta(3)*cos(theta(1))*cos(theta(3))*sin(theta(2)))/2 - (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(1))*sin(theta(2))*sin(theta(3)))/2 - (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(1))*sin(theta(2))*sin(theta(3)))/2 - (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(2))*sin(theta(1))*sin(theta(3)))/2 - (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(3))*sin(theta(1))*sin(theta(2)))/2 - (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(2))*sin(theta(1))*sin(theta(3)))/2 - (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(3))*sin(theta(1))*sin(theta(2)))/2 + (I3(1,1)*d_theta(1)*d_theta(2)*sin(theta(1))*sin(theta(2))*sin(theta(3)))/2 + (I3(1,1)*d_theta(1)*d_theta(3)*sin(theta(1))*sin(theta(2))*sin(theta(3)))/2 - l2*lc3*m3*d_theta(1)^2*cos(2*theta(2))*sin(theta(3)) - l2*lc3*m3*d_theta(1)^2*sin(2*theta(2))*cos(theta(3));
V(3,1) = (I3(1,3)*d_theta(1)^2*cos(theta(2) + theta(3)))/2 + (I3(3,3)*d_theta(1)^2*sin(theta(2) + theta(3)))/2 + (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(2) - theta(1) + theta(3)))/4 + (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(2) - theta(1) + theta(3)))/4 - (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(2) - theta(1) + theta(3)))/4 - (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(2) - theta(1) + theta(3)))/4 + (I3(1,1)*d_theta(1)*d_theta(2)*sin(theta(2) - theta(1) + theta(3)))/4 + (I3(1,1)*d_theta(1)*d_theta(3)*sin(theta(2) - theta(1) + theta(3)))/4 + (I3(3,2)*d_theta(1)*d_theta(2)*sin(theta(2) - theta(1) + theta(3)))/4 + (I3(3,2)*d_theta(1)*d_theta(3)*sin(theta(2) - theta(1) + theta(3)))/4 + (I3(1,2)*d_theta(1)*d_theta(2)*cos(theta(1) + theta(2) + theta(3)))/4 + (I3(1,2)*d_theta(1)*d_theta(3)*cos(theta(1) + theta(2) + theta(3)))/4 + (I3(3,1)*d_theta(1)*d_theta(2)*cos(theta(1) + theta(2) + theta(3)))/4 + (I3(3,1)*d_theta(1)*d_theta(3)*cos(theta(1) + theta(2) + theta(3)))/4 - (I3(1,1)*d_theta(1)*d_theta(2)*sin(theta(1) + theta(2) + theta(3)))/4 - (I3(1,1)*d_theta(1)*d_theta(3)*sin(theta(1) + theta(2) + theta(3)))/4 + (I3(3,2)*d_theta(1)*d_theta(2)*sin(theta(1) + theta(2) + theta(3)))/4 + (I3(3,2)*d_theta(1)*d_theta(3)*sin(theta(1) + theta(2) + theta(3)))/4 - (lc3^2*m3*d_theta(1)^2*sin(2*theta(2) + 2*theta(3)))/2 + (l2*lc3*m3*d_theta(1)^2*sin(theta(3)))/2 + l2*lc3*m3*d_theta(2)^2*sin(theta(3)) - (l2*lc3*m3*d_theta(1)^2*sin(2*theta(2) + theta(3)))/2 + l2*lc3*m3*d_theta(2)*d_theta(3)*sin(theta(3));

V;
end
